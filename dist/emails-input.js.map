{"version":3,"file":"emails-input.js","sources":["../src/utils/index.ts","../src/events.ts","../src/models/Email.ts","../src/models/Emails.ts","../src/index.ts","../src/utils/pubsub.ts","../src/components/EmailsInput.ts","../src/components/Footer.ts","../src/components/Body.ts","../src/components/Emails.ts","../src/components/Inputs.ts"],"sourcesContent":["export function htmlToElement(html: string) {\n  const template = document.createElement('template');\n  template.innerHTML = html.trim();\n\n  // IE does not have template.content\n  return (template.firstChild || template.content.firstChild) as HTMLElement;\n}\n\nfunction getRandomInt(max: number, min: number = 0) {\n  const iMin = Math.ceil(min);\n  const iMax = Math.floor(max);\n  return Math.floor(Math.random() * (iMax - iMin) + min);\n}\n\nexport function generateRandomEmail() {\n  const domains = [\n    'gmail.com',\n    'yahoo.com',\n    'hotmail.com',\n    'aol.com',\n    'hotmail.co.uk',\n    'hotmail.fr',\n    'msn.com',\n    'yahoo.fr',\n    'wanadoo.fr',\n    'orange.fr',\n    'comcast.net',\n    'yahoo.co.uk',\n    'yahoo.com.br',\n    'yahoo.co.in',\n    'live.com',\n    'rediffmail.com',\n    'free.fr',\n    'gmx.de',\n    'web.de',\n    'yandex.ru',\n    'ymail.com',\n    'libero.it',\n    'outlook.com',\n    'uol.com.br',\n    'bol.com.br',\n    'mail.ru',\n    'cox.net',\n    'hotmail.it',\n    'sbcglobal.net',\n    'sfr.fr',\n    'live.fr',\n    'verizon.net',\n    'live.co.uk',\n    'googlemail.com',\n    'yahoo.es',\n    'ig.com.br',\n    'live.nl',\n    'bigpond.com',\n    'terra.com.br',\n    'yahoo.it',\n    'neuf.fr',\n    'yahoo.de',\n    'alice.it',\n    'rocketmail.com',\n    'att.net',\n    'laposte.net',\n    'facebook.com',\n    'bellsouth.net',\n    'yahoo.in',\n    'hotmail.es',\n    'charter.net',\n    'yahoo.ca',\n    'yahoo.com.au',\n    'rambler.ru',\n    'hotmail.de',\n    'tiscali.it',\n    'shaw.ca',\n    'yahoo.co.jp',\n    'sky.com',\n    'earthlink.net',\n    'optonline.net',\n    'freenet.de',\n    't-online.de',\n    'aliceadsl.fr',\n    'virgilio.it',\n    'home.nl',\n    'qq.com',\n    'telenet.be',\n    'me.com',\n    'yahoo.com.ar',\n    'tiscali.co.uk',\n    'yahoo.com.mx',\n    'voila.fr',\n    'gmx.net',\n    'mail.com',\n    'planet.nl',\n    'tin.it',\n    'live.it',\n    'ntlworld.com',\n    'arcor.de',\n    'yahoo.co.id',\n    'frontiernet.net',\n    'hetnet.nl',\n    'live.com.au',\n    'yahoo.com.sg',\n    'zonnet.nl',\n    'club-internet.fr',\n    'juno.com',\n    'optusnet.com.au',\n    'blueyonder.co.uk',\n    'bluewin.ch',\n    'skynet.be',\n    'sympatico.ca',\n    'windstream.net',\n    'mac.com',\n    'centurytel.net',\n    'chello.nl',\n    'live.ca',\n    'aim.com',\n    'bigpond.net.au',\n  ];\n\n  const strValues = 'abcdefghijklmnopqrstuvwj12345';\n\n  function generateName() {\n    let name = '';\n    const nameLength = getRandomInt(12, 2);\n\n    for (let i = 0; i < nameLength; i++) {\n      name += strValues.charAt(getRandomInt(strValues.length));\n    }\n\n    return name;\n  }\n\n  function generateDomain() {\n    return domains[getRandomInt(domains.length)];\n  }\n\n  return `${generateName()}@${generateDomain()}`;\n}\n\nexport function isEmailValid(email: string) {\n  const emailRegex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/g;\n\n  return !!email.match(emailRegex);\n}\n\nexport function sanitizeEmail(email: string) {\n  return email.trim();\n}\n\nexport function isFalsy(value: any) {\n  return !!value;\n}\n","import { EmailsType, PrimitiveEmail, PubSubType } from './types';\n\nenum events {\n  ADD_NEW_EMAIL = 'ADD_NEW_EMAIL',\n  REMOVE_EMAIL = 'REMOVE_EMAIL',\n  ADD_RANDOM_EMAIL = 'ADD_RANDOM_EMAIL',\n  ALERT_EMAILS_SIZE = 'ALERT_EMAILS_SIZE',\n  EMAILS_LIST_UPDATED = 'EMAILS_LIST_UPDATED',\n  EMAIL_CONTAINER_CLICKED = 'EMAIL_CONTAINER_CLICKED',\n  REMOVE_LAST_EMAIL = 'REMOVE_LAST_EMAIL',\n}\n\nexport function createAppEvents(pubsub: PubSubType) {\n  return {\n    emailsUpdated: {\n      subscribe(fn: (emails: EmailsType) => void) {\n        pubsub.subscribe(events.EMAILS_LIST_UPDATED, fn);\n      },\n      publish(emails: EmailsType) {\n        pubsub.publish(events.EMAILS_LIST_UPDATED, emails);\n      },\n    },\n    emailContainerClicked: {\n      subscribe(fn: () => void) {\n        pubsub.subscribe(events.EMAIL_CONTAINER_CLICKED, fn);\n      },\n      publish() {\n        pubsub.publish(events.EMAIL_CONTAINER_CLICKED, null);\n      },\n    },\n    addNewEmail: {\n      publish(emailValue: PrimitiveEmail) {\n        pubsub.publish(events.ADD_NEW_EMAIL, emailValue);\n      },\n      subscribe(fn: (emailValue: PrimitiveEmail) => void) {\n        pubsub.subscribe(events.ADD_NEW_EMAIL, fn);\n      },\n    },\n    addRandomEmail: {\n      publish() {\n        pubsub.publish(events.ADD_RANDOM_EMAIL, null);\n      },\n      subscribe(fn: () => void) {\n        pubsub.subscribe(events.ADD_RANDOM_EMAIL, fn);\n      },\n    },\n    removeLastEmail: {\n      publish() {\n        pubsub.publish(events.REMOVE_LAST_EMAIL, null);\n      },\n      subscribe(fn: () => void) {\n        pubsub.subscribe(events.REMOVE_LAST_EMAIL, fn);\n      },\n    },\n    removeEmail: {\n      publish(email: PrimitiveEmail) {\n        pubsub.publish(events.REMOVE_EMAIL, email);\n      },\n      subscribe(fn: (email: PrimitiveEmail) => void) {\n        pubsub.subscribe(events.REMOVE_EMAIL, fn);\n      },\n    },\n    alertEmailsSize: {\n      publish() {\n        pubsub.publish(events.ALERT_EMAILS_SIZE, null);\n      },\n      subscribe(fn: () => void) {\n        pubsub.subscribe(events.ALERT_EMAILS_SIZE, fn);\n      },\n    },\n  };\n}\n","import { PrimitiveEmail } from '../types';\nimport { isEmailValid, sanitizeEmail } from '../utils';\n\nexport function EmailModel(email: PrimitiveEmail) {\n  return {\n    value: sanitizeEmail(email),\n    isValid: isEmailValid(email),\n    createdAt: new Date().getTime(),\n  };\n}\n","import {\n  AppEvents,\n  EmailModelType,\n  EmailsType,\n  PrimitiveEmail,\n} from '../types';\nimport { generateRandomEmail, isFalsy, sanitizeEmail } from '../utils';\nimport { EmailModel } from './Email';\n\nfunction createdAtAscend(x: EmailModelType, y: EmailModelType) {\n  if (x.createdAt < y.createdAt) {\n    return -1;\n  }\n  if (x.createdAt > y.createdAt) {\n    return 1;\n  }\n  return 0;\n}\n\nexport function Emails(appEvents: AppEvents) {\n  let emails: EmailsType = [];\n\n  function updateEmails(newEmailsList: EmailsType) {\n    emails = newEmailsList.sort(createdAtAscend);\n    // Do I need to call this event here?\n    appEvents.emailsUpdated.publish(emails);\n  }\n\n  function add(emailValue: PrimitiveEmail) {\n    const listOfEmails = emailValue\n      .split(',')\n      .map(sanitizeEmail)\n      .filter(isFalsy)\n      .map(EmailModel);\n\n    if (listOfEmails.length > 0) {\n      const next = emails.concat(listOfEmails);\n\n      updateEmails(next);\n    }\n  }\n\n  function addRandom() {\n    const randomEmail = generateRandomEmail();\n\n    add(randomEmail);\n  }\n\n  function size() {\n    return emails.filter((e) => e.isValid).length;\n  }\n\n  function remove(email: PrimitiveEmail) {\n    const filteredEmails = emails.filter((e) => e.value !== email);\n    updateEmails(filteredEmails);\n  }\n\n  function removeLast() {\n    const nextEmails = [...emails].sort(createdAtAscend);\n    nextEmails.pop();\n\n    updateEmails(nextEmails);\n  }\n\n  return {\n    add,\n    size,\n    addRandom,\n    remove,\n    removeLast,\n    list() {\n      return [...emails];\n    },\n  };\n}\n","import { EmailsInput } from './components/EmailsInput';\nimport { createAppEvents } from './events';\nimport { Emails } from './models/Emails';\nimport { PubSub } from './utils/pubsub';\n\nfunction EmailsInputLib(node: HTMLElement) {\n  const pubsubChannel = PubSub();\n  const appEvents = createAppEvents(pubsubChannel);\n\n  const emailsState = Emails(appEvents);\n\n  appEvents.addRandomEmail.subscribe(() => {\n    emailsState.addRandom();\n  });\n\n  appEvents.addNewEmail.subscribe((emailValue) => {\n    emailsState.add(emailValue);\n  });\n\n  appEvents.removeLastEmail.subscribe(() => {\n    emailsState.removeLast();\n  });\n\n  appEvents.removeEmail.subscribe((email) => {\n    emailsState.remove(email);\n  });\n\n  appEvents.alertEmailsSize.subscribe(() => {\n    alert(`Total emails: ${emailsState.size()}`);\n  });\n\n  const emailsInputNode = EmailsInput(appEvents);\n  node.insertAdjacentElement('afterbegin', emailsInputNode);\n\n  return emailsInputNode;\n}\n\n/* Needs to be default to be able to access globally */\nexport default EmailsInputLib;\n","import { Event } from '../types';\n\nexport function PubSub() {\n  const events = {} as Event;\n\n  function subscribe(eventName: string, fn: Function) {\n    const fns = events[eventName] || [];\n    fns.push(fn);\n\n    events[eventName] = fns;\n  }\n\n  function publish<T>(eventName: string, data?: T) {\n    if (events[eventName]) {\n      events[eventName].forEach((fn) => {\n        fn(data);\n      });\n    }\n  }\n\n  return {\n    subscribe,\n    publish,\n  };\n}\n","import { htmlToElement } from '../utils';\n\nimport { Footer } from './Footer';\nimport { Body } from './Body';\nimport { AppEvents } from '../types';\n\nexport function EmailsInput(appEvents: AppEvents) {\n  const emailsInputNode = htmlToElement(\n    `<section class=\"emails-input__card\" data-name=\"emails-input\"></section>`\n  );\n\n  const footerNode = Footer(appEvents);\n  const bodyNode = Body(appEvents);\n\n  emailsInputNode.appendChild(bodyNode);\n  emailsInputNode.appendChild(footerNode);\n\n  return emailsInputNode;\n}\n","import { AppEvents } from '../types';\nimport { htmlToElement } from '../utils';\n\nexport function Footer(appEvents: AppEvents) {\n  const footer = htmlToElement(\n    `<footer class=\"emails-input__actions-container\"></footer>`\n  );\n\n  const addEmailButton = htmlToElement(\n    `<button class=\"emails-input__button\" type=\"button\">Add email</button>`\n  );\n\n  addEmailButton.addEventListener('mousedown', (event) => {\n    appEvents.addRandomEmail.publish();\n\n    event.preventDefault();\n  });\n\n  const countEmailsButton = htmlToElement(\n    `<button class=\"emails-input__button\" type=\"button\">Get emails count</button>`\n  );\n\n  countEmailsButton.addEventListener('mousedown', (event) => {\n    appEvents.alertEmailsSize.publish();\n\n    event.preventDefault();\n  });\n\n  footer.appendChild(addEmailButton);\n  footer.appendChild(countEmailsButton);\n\n  return footer;\n}\n","import { AppEvents } from '../types';\nimport { htmlToElement } from '../utils';\nimport { Emails } from './Emails';\nimport { Inputs } from './Inputs';\n\nexport function Body(appEvents: AppEvents) {\n  const bodyNode = htmlToElement(`<div class=\"emails-input__body\"></div>`);\n\n  const titleNode = htmlToElement(\n    `<h2 class=\"title\">Share <strong>Board name</strong> with others</h2>`\n  );\n  bodyNode.appendChild(titleNode);\n\n  const emailsContainerNode = htmlToElement(\n    `<div class=\"emails-container\"></div>`\n  );\n  bodyNode.appendChild(emailsContainerNode);\n\n  emailsContainerNode.addEventListener('click', function (event) {\n    /**\n     * This prevents incorrect event dispatch when some internal\n     * element (e.g. remove button) got clicked.\n     */\n    if (event.target === emailsContainerNode) {\n      appEvents.emailContainerClicked.publish();\n    }\n  });\n\n  function renderEmails() {\n    Emails({ emailsContainerNode, appEvents });\n  }\n\n  function renderInputs() {\n    Inputs({ emailsContainerNode, appEvents });\n  }\n\n  renderEmails();\n  renderInputs();\n\n  return bodyNode;\n}\n","import { AppEvents, EmailModelType } from '../types';\nimport { htmlToElement } from '../utils';\n\nfunction RemoveButton({\n  email,\n  appEvents,\n}: {\n  email: EmailModelType['value'];\n  appEvents: AppEvents;\n}) {\n  const button = htmlToElement(`\n    <span class=\"email-tag__remove-button\" role=\"button\" tabindex=\"0\">\n      <svg width=\"8\" height=\"8\" fill=\"none\">\n        <path\n          fill-rule=\"evenodd\"\n          clip-rule=\"evenodd\"\n          d=\"M8 .8L7.2 0 4 3.2.8 0 0 .8 3.2 4 0 7.2l.8.8L4 4.8 7.2 8l.8-.8L4.8 4 8 .8z\"\n          fill=\"currentColor\"\n        />\n      </svg>\n    </span>\n  `);\n\n  button.addEventListener('mousedown', (event) => {\n    appEvents.removeEmail.publish(email);\n\n    /**\n     * Prevents trigger submit events\n     */\n    event.preventDefault();\n  });\n\n  button.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      appEvents.removeEmail.publish(email);\n      /**\n       * Prevents trigger submit events\n       */\n      event.preventDefault();\n    }\n  });\n\n  return button;\n}\n\nfunction Email({\n  email,\n  appEvents,\n}: {\n  email: EmailModelType;\n  appEvents: AppEvents;\n}) {\n  const containerNode = htmlToElement(`<span class=\"email-tag\"></span>`);\n\n  if (!email.isValid) {\n    containerNode.classList.add('invalid');\n  }\n\n  const emailNode = htmlToElement(\n    `<span class=\"email-tag__text\">${email.value}</span>`\n  );\n\n  const removeButton = RemoveButton({ email: email.value, appEvents });\n\n  containerNode.appendChild(emailNode);\n  containerNode.appendChild(removeButton);\n\n  return containerNode;\n}\n\nexport function Emails({\n  emailsContainerNode,\n  appEvents,\n}: {\n  emailsContainerNode: HTMLElement;\n  appEvents: AppEvents;\n}) {\n  function removeExistingTags() {\n    const nodes: Element[] = [];\n\n    // IE11 compatibility\n    // const nodes = Array.from(\n    //   emailsContainerNode.querySelectorAll('.email-tag')\n    // );\n    const tags = emailsContainerNode.querySelectorAll('.email-tag');\n    for (let index = 0; index < tags.length; index++) {\n      nodes.push(tags[index]);\n    }\n\n    if (tags.length > 0) {\n      for (const node of nodes) {\n        // IE11 compatibility\n        // node.remove();\n        node.parentNode!.removeChild(node);\n      }\n    }\n  }\n\n  appEvents.emailsUpdated.subscribe((emails) => {\n    removeExistingTags();\n\n    const emailsNode = emails.map((e) => Email({ email: e, appEvents }));\n\n    // IE11 compatibility\n    // emailsContainerNode.prepend(...emailsNode);\n    emailsNode.reverse().forEach((node) => {\n      /**\n       * afterbegin because I want the inputs to be the last element in\n       * the field\n       */\n      emailsContainerNode.insertAdjacentElement('afterbegin', node);\n    });\n  });\n\n  return emailsContainerNode;\n}\n","import { AppEvents, PrimitiveEmail } from '../types';\nimport { htmlToElement } from '../utils';\n\nexport function Inputs({\n  emailsContainerNode,\n  appEvents,\n}: {\n  emailsContainerNode: HTMLElement;\n  appEvents: AppEvents;\n}) {\n  const mainInputNode = htmlToElement(\n    `<input class=\"input\" type=\"text\" placeholder=\"add more people… \" />`\n  ) as HTMLInputElement;\n\n  const hiddenInput = htmlToElement(\n    `<input type=\"hidden\" name=\"emails-input\" />`\n  ) as HTMLInputElement;\n\n  appEvents.emailsUpdated.subscribe((emails) => {\n    const serializedEmails = emails.map((e) => e.value).join(',');\n    hiddenInput.value = serializedEmails;\n  });\n\n  mainInputNode.addEventListener('paste', (event) => {\n    /**\n     * MDN Implementation\n     * https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event\n     */\n    const pastedValue = (event.clipboardData || window.clipboardData).getData(\n      'text'\n    );\n\n    onNewEmail(pastedValue);\n    /**\n     * Prevents the event to add in the input the user text because it's already\n     * has been handled by onNewEmail flow\n     */\n    event.preventDefault();\n  });\n\n  function focusMainInput() {\n    mainInputNode.focus();\n  }\n\n  function onNewEmail(emailValue: PrimitiveEmail) {\n    mainInputNode.value = '';\n    appEvents.addNewEmail.publish(emailValue);\n    focusMainInput();\n  }\n\n  function handleKeyDown(event: KeyboardEvent) {\n    function handleBackspace() {\n      /**\n       * We only want to remove last element if\n       * there is nothing being typed on the input\n       */\n      if (mainInputNode.value.length === 0) {\n        appEvents.removeLastEmail.publish();\n        focusMainInput();\n      }\n    }\n\n    function handleCommaAndEnter() {\n      /**\n       * This prevents:\n       * - (comma case) adding \",\" into the input\n       * - (enter) submitting form if input is inside\n       */\n      event.preventDefault();\n      onNewEmail(mainInputNode.value);\n    }\n\n    /**\n     * IE Compatibility\n     * It does not supports event.code\n     */\n    function IEValidation() {\n      const ENTER = 13;\n      const COMMA = 188;\n      const BACKSPACE = 8;\n      switch (event.keyCode) {\n        case BACKSPACE: {\n          handleBackspace();\n          break;\n        }\n        case ENTER:\n        case COMMA: {\n          handleCommaAndEnter();\n          break;\n        }\n        default:\n          break;\n      }\n    }\n\n    function modernBrowserValidation() {\n      switch (event.code) {\n        case 'Backspace': {\n          handleBackspace();\n          break;\n        }\n        case 'Comma':\n        case 'Enter': {\n          handleCommaAndEnter();\n          break;\n        }\n        default:\n          break;\n      }\n    }\n\n    if (event.code) {\n      modernBrowserValidation();\n    } else {\n      IEValidation();\n    }\n  }\n\n  mainInputNode.addEventListener('keydown', handleKeyDown);\n\n  mainInputNode.addEventListener('focusout', () => {\n    if (mainInputNode.value.length > 0) {\n      onNewEmail(mainInputNode.value);\n    }\n  });\n\n  appEvents.removeEmail.subscribe(() => {\n    focusMainInput();\n  });\n\n  appEvents.emailContainerClicked.subscribe(() => {\n    focusMainInput();\n  });\n\n  emailsContainerNode.appendChild(hiddenInput);\n  emailsContainerNode.appendChild(mainInputNode);\n}\n"],"names":["htmlToElement","html","template","document","createElement","innerHTML","trim","firstChild","content","getRandomInt","max","min","iMin","Math","ceil","iMax","floor","random","isEmailValid","email","match","sanitizeEmail","isFalsy","value","events","EmailModel","isValid","createdAt","Date","getTime","createdAtAscend","x","y","node","pubsub","pubsubChannel","subscribe","eventName","fn","fns","push","publish","data","forEach","PubSub","appEvents","emailsUpdated","EMAILS_LIST_UPDATED","emails","emailContainerClicked","EMAIL_CONTAINER_CLICKED","addNewEmail","emailValue","ADD_NEW_EMAIL","addRandomEmail","ADD_RANDOM_EMAIL","removeLastEmail","REMOVE_LAST_EMAIL","removeEmail","REMOVE_EMAIL","alertEmailsSize","ALERT_EMAILS_SIZE","emailsState","updateEmails","newEmailsList","sort","add","listOfEmails","split","map","filter","length","concat","size","e","addRandom","domains","strValues","name","nameLength","i","charAt","generateName","remove","removeLast","nextEmails","pop","list","Emails","alert","emailsInputNode","footerNode","footer","addEmailButton","addEventListener","event","preventDefault","countEmailsButton","appendChild","Footer","bodyNode","titleNode","emailsContainerNode","target","nodes","tags","querySelectorAll","index","parentNode","removeChild","removeExistingTags","containerNode","classList","emailNode","removeButton","button","key","RemoveButton","Email","reverse","insertAdjacentElement","mainInputNode","hiddenInput","focusMainInput","focus","onNewEmail","serializedEmails","join","clipboardData","window","getData","handleBackspace","handleCommaAndEnter","code","modernBrowserValidation","keyCode","IEValidation","Inputs","Body","EmailsInput"],"mappings":"2MAAgBA,EAAcC,OACtBC,EAAWC,SAASC,cAAc,mBACxCF,EAASG,UAAYJ,EAAKK,OAGlBJ,EAASK,YAAcL,EAASM,QAAQD,WAGlD,SAASE,EAAaC,EAAaC,YAAAA,IAAAA,EAAc,OACzCC,EAAOC,KAAKC,KAAKH,GACjBI,EAAOF,KAAKG,MAAMN,UACjBG,KAAKG,MAAMH,KAAKI,UAAYF,EAAOH,GAAQD,YA+HpCO,EAAaC,WAGlBA,EAAMC,MAFI,kFAKLC,EAAcF,UACrBA,EAAMb,gBAGCgB,EAAQC,WACbA,4GCnJX,IAAKC,WCCWC,EAAWN,SAClB,CACLI,MAAOF,EAAcF,GACrBO,QAASR,EAAaC,GACtBQ,WAAW,IAAIC,MAAOC,WCE1B,SAASC,EAAgBC,EAAmBC,UACtCD,EAAEJ,UAAYK,EAAEL,WACV,EAENI,EAAEJ,UAAYK,EAAEL,UACX,EAEF,SFdT,SAAKH,GACHA,gCACAA,8BACAA,sCACAA,wCACAA,4CACAA,oDACAA,wCAPF,CAAKA,IAAAA,OGGL,SAAwBS,OHOQC,EGNxBC,iBCHAX,EAAS,SAiBR,CACLY,mBAhBiBC,EAAmBC,OAC9BC,EAAMf,EAAOa,IAAc,GACjCE,EAAIC,KAAKF,GAETd,EAAOa,GAAaE,GAapBE,iBAVkBJ,EAAmBK,GACjClB,EAAOa,IACTb,EAAOa,GAAWM,SAAQ,SAACL,GACzBA,EAAGI,QDTaE,GAChBC,GHKwBX,EGLIC,EHM3B,CACLW,cAAe,CACbV,mBAAUE,GACRJ,EAAOE,UAAUZ,EAAOuB,oBAAqBT,IAE/CG,iBAAQO,GACNd,EAAOO,QAAQjB,EAAOuB,oBAAqBC,KAG/CC,sBAAuB,CACrBb,mBAAUE,GACRJ,EAAOE,UAAUZ,EAAO0B,wBAAyBZ,IAEnDG,mBACEP,EAAOO,QAAQjB,EAAO0B,wBAAyB,QAGnDC,YAAa,CACXV,iBAAQW,GACNlB,EAAOO,QAAQjB,EAAO6B,cAAeD,IAEvChB,mBAAUE,GACRJ,EAAOE,UAAUZ,EAAO6B,cAAef,KAG3CgB,eAAgB,CACdb,mBACEP,EAAOO,QAAQjB,EAAO+B,iBAAkB,OAE1CnB,mBAAUE,GACRJ,EAAOE,UAAUZ,EAAO+B,iBAAkBjB,KAG9CkB,gBAAiB,CACff,mBACEP,EAAOO,QAAQjB,EAAOiC,kBAAmB,OAE3CrB,mBAAUE,GACRJ,EAAOE,UAAUZ,EAAOiC,kBAAmBnB,KAG/CoB,YAAa,CACXjB,iBAAQtB,GACNe,EAAOO,QAAQjB,EAAOmC,aAAcxC,IAEtCiB,mBAAUE,GACRJ,EAAOE,UAAUZ,EAAOmC,aAAcrB,KAG1CsB,gBAAiB,CACfnB,mBACEP,EAAOO,QAAQjB,EAAOqC,kBAAmB,OAE3CzB,mBAAUE,GACRJ,EAAOE,UAAUZ,EAAOqC,kBAAmBvB,OG1D3CwB,WDUejB,OACjBG,EAAqB,YAEhBe,EAAaC,GACpBhB,EAASgB,EAAcC,KAAKnC,GAE5Be,EAAUC,cAAcL,QAAQO,YAGzBkB,EAAId,OACLe,EAAef,EAClBgB,MAAM,KACNC,IAAIhD,GACJiD,OAAOhD,GACP+C,IAAI5C,GAEH0C,EAAaI,OAAS,GAGxBR,EAFaf,EAAOwB,OAAOL,UA4BxB,CACLD,IAAAA,EACAO,uBAjBOzB,EAAOsB,QAAO,SAACI,UAAMA,EAAEhD,WAAS6C,QAkBvCI,yBHpDIC,EAuGAC,EGzEJX,GH9BIU,EAAU,CACd,YACA,YACA,cACA,UACA,gBACA,aACA,UACA,WACA,aACA,YACA,cACA,cACA,eACA,cACA,WACA,iBACA,UACA,SACA,SACA,YACA,YACA,YACA,cACA,aACA,aACA,UACA,UACA,aACA,gBACA,SACA,UACA,cACA,aACA,iBACA,WACA,YACA,UACA,cACA,eACA,WACA,UACA,WACA,WACA,iBACA,UACA,cACA,eACA,gBACA,WACA,aACA,cACA,WACA,eACA,aACA,aACA,aACA,UACA,cACA,UACA,gBACA,gBACA,aACA,cACA,eACA,cACA,UACA,SACA,aACA,SACA,eACA,gBACA,eACA,WACA,UACA,WACA,YACA,SACA,UACA,eACA,WACA,cACA,kBACA,YACA,cACA,eACA,YACA,mBACA,WACA,kBACA,mBACA,aACA,YACA,eACA,iBACA,UACA,iBACA,YACA,UACA,UACA,kBAGIC,EAAY,mDAGZC,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"}